$docker -v
$docker build -t <JarName> .
$docker image ls

$docker run -p 9090:8080 <JarName/ImageName> 
//9090 is Container
//the App can be accessed both with 9090 & 8080 ports now. Use https://<IP>/xxx

//Using DockerHub
$docker login
$docker tag <ImageName> <DockerID>/<ImageName>
$docker push <DockerID>/<ImageName>
$docker pull <DockerID>/<ImageName>
$docker run -p 9090:8080 <DockerID>/<ImageName>

//With Springboot 2.3.0 M1 version & above Option
mvn spring-boot:build-image
docker run --tty --publish 8080:8080 <imageName generated from above Command>

//Using Google JIB Library as Container Tools
mvn clean compile jib:build
docker run -it -p 8080:8080 <dockerID>/<imageName>
//if any changes are made, we can also go in IDE - Maven - Plugin - jib - jib:build (Right Click & Run Maven Build)

//Dockerize Springboot & MongoDB
------------------------
docker pull mongo:latest
docker images
docker ps //shows Containers
docker run -d -p 27017:27017 --name <containerName> <imageName i.e. mongo:latest>
//after Maven Install once the JAR is built execute
docker build -t <imageName>:1.0 .
docker run -p 8080:8080 --name <newContainerName> --link <containerName>:mongo -d <imageName>:1.0 //Creates another container
---
OR
---
//write the docker-compose.yml, go to the folder location and execute
docker-compose up 
------------------------------
docker logs <newContainerName>
//Once Services are Hit for CRUD Operations
docker exec -it <containerName> bash
  - mongo
  - show dbs
  - use <DBName>
  - show collections
  - db.<collectionName>.find().pretty()
docker rm -f <Container ID from docker ps> //Kills Container
